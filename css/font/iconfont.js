;(function(window) {

  var svgSprite = '<svg>' +
    '' +
    '<symbol id="icon-naozhong" viewBox="0 0 1024 1024">' +
    '' +
    '<path d="M513.450667 186.146133c-207.394133 0-375.466667 168.106667-375.466667 375.466667 0 94.1056 34.7136 180.0704 91.938133 245.9648l-87.825067 107.6736 26.436267 21.572267 85.111467-104.2944c67.447467 64.699733 158.941867 104.533333 259.822933 104.533333 101.102933 0 192.802133-40.0384 260.317867-105.028267l85.060267 104.925867 26.538667-21.504-87.893333-108.4416c56.9344-65.826133 91.4432-151.569067 91.4432-245.4016C888.917333 354.2528 720.776533 186.146133 513.450667 186.146133zM513.450667 902.912c-188.2112 0-341.333333-153.105067-341.333333-341.2992 0-188.228267 153.122133-341.333333 341.333333-341.333333s341.333333 153.105067 341.333333 341.333333C854.784 749.824 701.661867 902.912 513.450667 902.912z"  ></path>' +
    '' +
    '<path d="M359.099733 83.712 257.706667 83.712c-94.2592 0-170.666667 76.407467-170.666667 170.666667l0 102.7072 48.5376 0L359.099733 132.283733 359.099733 83.712zM324.9664 118.2208 121.361067 322.952533 121.173333 322.952533l0-68.573867c0-75.264 61.252267-136.533333 136.533333-136.533333l67.259733 0L324.9664 118.2208z"  ></path>' +
    '' +
    '<path d="M769.706667 83.712l-101.461333 0 0 48.571733 223.573333 224.802133L940.373333 357.085867l0-102.7072C940.373333 160.119467 863.931733 83.712 769.706667 83.712zM906.24 322.952533l-0.238933 0L702.3616 118.2208 702.3616 117.845333 769.706667 117.845333c75.281067 0 136.533333 61.269333 136.533333 136.533333L906.24 322.952533z"  ></path>' +
    '' +
    '<path d="M496.64 561.578667 308.462933 561.578667 308.462933 595.712 530.773333 595.712 530.773333 288.512 496.64 288.512Z"  ></path>' +
    '' +
    '</symbol>' +
    '' +
    '<symbol id="icon-jiahao" viewBox="0 0 1024 1024">' +
    '' +
    '<path d="M165.10278 480.759485l696.169533 0 0 58.015322-696.169533 0 0-58.015322Z"  ></path>' +
    '' +
    '<path d="M484.179886 161.682379l58.014298 0 0 696.170556-58.014298 0 0-696.170556Z"  ></path>' +
    '' +
    '</symbol>' +
    '' +
    '<symbol id="icon-wifi" viewBox="0 0 1024 1024">' +
    '' +
    '<path d="M969.365 775.544c0.778-23.454 1.999-127.965-31.447-245.99-26.353-92.802-76.534-196.737-160.214-280.118C679.57 151.656 580.76 100.225 492.255 73.199c-92.58-28.249-175.107-30.064-232.709-30.083-0.014 0-0.028-0.001-0.042-0.001-0.013 0-0.026 0.001-0.039 0.001-0.318 0-0.647-0.001-0.964-0.001l0 0.025c-17.208 0.522-30.997 14.394-30.997 31.441s13.789 30.918 30.997 31.441l0 0.353c0 0 103.626-5.189 226.482 34.068 80.347 25.751 169.275 70.474 243.43 148.069 83.344 87.214 125.699 177.877 147.894 259.415 25.909 95.438 24.242 178.354 28.469 228.64-0.093 0.986-0.146 1.983-0.146 2.993 0 17.673 14.551 32 32.5 32s32.5-14.327 32.5-32C969.628 778.199 969.531 776.86 969.365 775.544z"  ></path>' +
    '' +
    '<path d="M249.141 690.953c-27.95 26.713-28.955 71.02-2.246 98.97 26.71 27.95 71.02 28.955 98.97 2.246 27.949-26.71 28.955-71.021 2.245-98.969C321.401 665.249 277.09 664.244 249.141 690.953z"  ></path>' +
    '' +
    '<path d="M262.59 350.334c-0.874-0.095-1.76-0.146-2.653-0.167-0.479-0.029-0.964-0.06-1.437-0.087l0 0.084c-17.362 0.363-31.331 14.762-31.331 32.483s13.968 32.12 31.331 32.483l0 0.258c56.043 5.146 158.736 25.917 235.765 106.521 87.947 92.028 95.864 194.522 96.061 253.399-0.276 1.679-0.426 3.398-0.426 5.153 0 17.673 14.551 32 32.5 32s32.5-14.327 32.5-32l0.121 0c1.652-61.188-8.498-195.881-114.637-304.234C443.082 376.8 327.824 354.646 262.59 350.334z"  ></path>' +
    '' +
    '</symbol>' +
    '' +
    '<symbol id="icon-sousuo_sousuo" viewBox="0 0 1025 1024">' +
    '' +
    '<path d="M975.896052 1024c-5.629185 0-11.258371-1.023488-16.375812-2.558721s-9.723138-4.093953-13.817092-7.676162l-5.629185-4.605697-297.835082-291.694153-4.605698 3.070465c-69.085457 47.592204-147.382309 71.644178-232.843578 71.644178-8.69965 0-17.3993-0.511744-26.09895-1.023488-8.69965-0.511744-17.3993-2.046977-26.098951-3.582209-59.362319-6.652674-117.189405-27.122439-166.316841-59.362319-54.244878-33.775112-98.766617-79.32034-131.006497-135.612194-15.864068-26.098951-28.145927-54.244878-36.845577-82.902549-8.69965-29.169415-14.328836-59.362319-16.375812-90.066966-2.046977-30.192904 0-60.897551 5.117441-91.090455 7.676162-49.127436 25.075462-95.184408 51.686157-137.147426 26.098951-42.474763 59.874063-78.808596 100.813593-108.489755 34.286857-26.610695 73.17941-47.08046 115.654173-61.409296 41.963018-14.328836 85.973013-21.493253 130.494752-21.493253 18.934533 0 36.845577 1.023488 53.733134 3.582209 46.056972 6.14093 90.066967 19.958021 132.029985 40.93953 41.451274 20.981509 78.808596 48.103948 110.024987 81.879061 36.333833 37.357321 64.47976 81.367316 83.926037 132.029985 18.934533 50.662669 27.634183 102.86057 25.075463 154.546726-3.070465 86.996502-34.286857 166.316842-92.625688 235.402299l-4.093953 4.605697 296.299851 289.135433v5.117441h3.582208c7.164418 9.211394 10.746627 18.422789 10.746627 29.169415 0 12.793603-4.605697 23.54023-13.817091 32.751624-8.69965 8.69965-20.469765 13.817091-33.263369 13.817092l-1.535232 1.023488z m-610.510745-973.337331c-4.093953 0-7.676162 0.511744-11.770115 1.535232l-6.652673 1.023488c-51.174413 7.676162-101.325337 27.122439-143.8001 56.291854-42.986507 28.145927-79.32034 66.526737-104.907546 110.536732-29.681159 47.592204-46.056972 101.837081-49.127437 160.175912-3.070465 58.850575 8.187906 114.118941 33.263369 164.269865 20.981509 45.033483 52.709645 85.973013 91.602198 118.212894 38.892554 32.23988 84.949525 56.291854 134.076962 69.597201 32.23988 8.69965 64.47976 13.305347 96.71964 13.305347 19.958021 0 39.916042-1.535232 59.874063-5.117441 27.634183-4.605697 54.756622-12.793603 80.343828-23.54023 25.587206-10.746627 49.63918-24.563718 72.155922-40.93953s42.474763-34.798601 60.897552-55.268366c17.911044-20.981509 33.263368-43.498251 45.545227-68.061969 23.028486-43.498251 35.310345-90.578711 37.869065-139.194403 2.558721-48.103948-5.629185-97.231384-24.563718-141.753123-10.746627-27.634183-24.563718-53.733133-42.474762-77.785108-17.911044-24.051974-38.892554-46.056972-62.432784-65.503248-23.54023-18.934533-49.63918-35.310345-77.273363-47.592204-46.056972-20.981509-97.743128-31.728136-148.405797-31.728136-13.817091-0.511744-27.122439 0-40.939531 1.535233z"  ></path>' +
    '' +
    '</symbol>' +
    '' +
    '</svg>'
  var script = function() {
    var scripts = document.getElementsByTagName('script')
    return scripts[scripts.length - 1]
  }()
  var shouldInjectCss = script.getAttribute("data-injectcss")

  /**
   * document ready
   */
  var ready = function(fn) {
    if (document.addEventListener) {
      if (~["complete", "loaded", "interactive"].indexOf(document.readyState)) {
        setTimeout(fn, 0)
      } else {
        var loadFn = function() {
          document.removeEventListener("DOMContentLoaded", loadFn, false)
          fn()
        }
        document.addEventListener("DOMContentLoaded", loadFn, false)
      }
    } else if (document.attachEvent) {
      IEContentLoaded(window, fn)
    }

    function IEContentLoaded(w, fn) {
      var d = w.document,
        done = false,
        // only fire once
        init = function() {
          if (!done) {
            done = true
            fn()
          }
        }
        // polling for no errors
      var polling = function() {
        try {
          // throws errors until after ondocumentready
          d.documentElement.doScroll('left')
        } catch (e) {
          setTimeout(polling, 50)
          return
        }
        // no errors, fire

        init()
      };

      polling()
        // trying to always fire before onload
      d.onreadystatechange = function() {
        if (d.readyState == 'complete') {
          d.onreadystatechange = null
          init()
        }
      }
    }
  }

  /**
   * Insert el before target
   *
   * @param {Element} el
   * @param {Element} target
   */

  var before = function(el, target) {
    target.parentNode.insertBefore(el, target)
  }

  /**
   * Prepend el to target
   *
   * @param {Element} el
   * @param {Element} target
   */

  var prepend = function(el, target) {
    if (target.firstChild) {
      before(el, target.firstChild)
    } else {
      target.appendChild(el)
    }
  }

  function appendSvg() {
    var div, svg

    div = document.createElement('div')
    div.innerHTML = svgSprite
    svgSprite = null
    svg = div.getElementsByTagName('svg')[0]
    if (svg) {
      svg.setAttribute('aria-hidden', 'true')
      svg.style.position = 'absolute'
      svg.style.width = 0
      svg.style.height = 0
      svg.style.overflow = 'hidden'
      prepend(svg, document.body)
    }
  }

  if (shouldInjectCss && !window.__iconfont__svg__cssinject__) {
    window.__iconfont__svg__cssinject__ = true
    try {
      document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>");
    } catch (e) {
      console && console.log(e)
    }
  }

  ready(appendSvg)


})(window)